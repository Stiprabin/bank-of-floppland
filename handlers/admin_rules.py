import random
from typing import Tuple
from database import Database
from grants import GrantCreating
from vkbottle.dispatch.rules.base import CommandRule
from vkbottle.bot import (
    Message,
    BotLabeler
)
from config import (
    CONFIG,
    profile
)
from state_groups import (
    Grants,
    Status,
    Product,
    Salaries
)
from vk_api import (
    api,
    ctx,
    uploader,
    state_dispenser
)


# labeler
admin_rules = BotLabeler()


# —É–¥–∞–ª–µ–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
@admin_rules.private_message(CommandRule("–µ—Ä–µ—Ç–∏–∫", [''], 1))
async def deleting_rule(message: Message, args: Tuple[str]):
    if message.from_id == CONFIG['ADMIN']:
        async with Database(CONFIG['DB_URL']) as db:
            if await db.exists(args[0]):
                await db.delete(args[0])
                await message.answer("‚úÖ –£—Å–ø–µ—à–Ω–æ!")
            else:
                await message.answer("‚ö† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    else:
        await message.answer("‚ö† –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ò–º–ø–µ—Ä—Å–∫–∏–º –∫–∞–∑–Ω–∞—á–µ–µ–º!")


# –¥–∏–∞–ø–∞–∑–æ–Ω –¥–ª—è –∫–∞–∑–Ω—ã
@admin_rules.private_message(CommandRule("–∫–∞–∑–Ω–∞", [''], 2))
async def coffer_rule(message: Message, args: Tuple[str]):
    if message.from_id == CONFIG['ADMIN']:
        async with Database(CONFIG['DB_URL']) as db:
            await db.delete("coffer_list")
            await db.lpush("coffer_list", int(args[0]))
            await db.rpush("coffer_list", int(args[1]))
            await message.answer("‚úÖ –£—Å–ø–µ—à–Ω–æ!")
    else:
        await message.answer("‚ö† –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ò–º–ø–µ—Ä—Å–∫–∏–º –∫–∞–∑–Ω–∞—á–µ–µ–º!")


# –≤—ã–¥–∞—á–∞ –∂–∞–ª–æ–≤–∞–Ω–∏–π
@admin_rules.private_message(CommandRule("–∑–∞–ø–ª–∞—Ç–∏—Ç—å", [''], 2))
async def salaries_rule(message: Message, args: Tuple[str]):
    if message.from_id == CONFIG['ADMIN']:
        ctx.set("salaries_id", args[0])
        ctx.set("salaries_cash", args[1])
        await state_dispenser.set(message.peer_id, Salaries.TEXT)
        return "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –∫ –∂–∞–ª–æ–≤–∞–Ω–∏—é"
    else:
        await message.answer("‚ö† –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ò–º–ø–µ—Ä—Å–∫–∏–º –∫–∞–∑–Ω–∞—á–µ–µ–º!")


# —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∫ –∂–∞–ª–æ–≤–∞–Ω–∏—é
@admin_rules.private_message(state=Salaries.TEXT)
async def salaries_state(message: Message):
    async with Database(CONFIG['DB_URL']) as db:
        # —Ö—Ä–∞–Ω–∏–ª–∏—â–µ CTX
        salaries_id = ctx.get("salaries_id")
        cash = ctx.get("salaries_cash")

        if await db.exists(salaries_id) and (salaries_id not in CONFIG['IGNORE']):
            # –≤—ã—Ä–µ–∑–∞—Ç—å —Ç–∏–ø –≤–∞–ª—é—Ç—ã
            salary = int(cash[0:-1])

            # –≤—ã–¥–∞—á–∞ –∏ –æ—Ç–±–æ—Ä —Ñ–ª–æ–ø—Ü–µ–≤
            if cash[-1] in ('f', '—Ñ'):
                await db.hincrby(salaries_id, "cash_f", salary)
                await db.set("coffer_cash", int(await db.get("coffer_cash")) - salary)

                if salary > 0:
                    await api.messages.send(peer_id=salaries_id,
                                            message=f"üí∏ –í–∞–º –≤—ã–¥–∞–Ω–æ –∂–∞–ª–æ–≤–∞–Ω–∏–µ: {salary} —Ñ–ª–æ–ø—Ü."
                                                    f"\n\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: <<{message.text}>>",
                                            random_id=0)
                if salary < 0:
                    await api.messages.send(peer_id=salaries_id,
                                            message=f"üìâ –£ –≤–∞—Å –æ—Ç–æ–±—Ä–∞–ª–∏: {str(salary)[1:]} —Ñ–ª–æ–ø—Ü."
                                                    f"\n\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: <<{message.text}>>",
                                            random_id=0)

                await message.answer("‚úÖ –£—Å–ø–µ—à–Ω–æ!")

            # –≤—ã–¥–∞—á–∞ –∏ –æ—Ç–±–æ—Ä –∏–º–ø–µ—Ä—Å–∫–∏—Ö –º–∞—Ä–æ–∫
            elif cash[-1] in ('m', '–º'):
                await db.hincrby(salaries_id, "cash_m", salary)
                await db.set("coffer_cash", int(await db.get("coffer_cash")) - salary * int(await db.get("mark")))

                if salary > 0:
                    await api.messages.send(peer_id=salaries_id,
                                            message=f"üí∏ –í–∞–º –≤—ã–¥–∞–Ω–æ –∂–∞–ª–æ–≤–∞–Ω–∏–µ: {salary} –º–∞—Ä–∫."
                                                    f"\n\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: <<{message.text}>>",
                                            random_id=0)
                if salary < 0:
                    await api.messages.send(peer_id=salaries_id,
                                            message=f"üìâ –£ –≤–∞—Å –æ—Ç–æ–±—Ä–∞–ª–∏: {str(salary)[1:]} –º–∞—Ä–∫."
                                                    f"\n\n–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: <<{message.text}>>",
                                            random_id=0)

                await message.answer("‚úÖ –£—Å–ø–µ—à–Ω–æ!")
            else:
                await message.answer("‚ö† –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!")
        else:
            await message.answer("‚ö† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")

        # –∏ –≤—Å–µ
        await state_dispenser.delete(message.peer_id)


# —É—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
@admin_rules.private_message(CommandRule("—Å—Ç–∞—Ç—É—Å", [''], 1))
async def status_rule(message: Message, args: Tuple[str]):
    if message.from_id == CONFIG['ADMIN']:
        ctx.set("status_id", args[0])
        await state_dispenser.set(message.peer_id, Status.TEXT)
        return "–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞—Ç—É—Å"
    else:
        await message.answer("‚ö† –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ò–º–ø–µ—Ä—Å–∫–∏–º –∫–∞–∑–Ω–∞—á–µ–µ–º!")


# —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
@admin_rules.private_message(state=Status.TEXT)
async def status_state(message: Message):
    async with Database(CONFIG['DB_URL']) as db:
        # —Ö—Ä–∞–Ω–∏–ª–∏—â–µ CTX
        new_status = message.text.title()
        status_id = ctx.get("status_id")

        if await db.exists(status_id) and (status_id not in CONFIG['IGNORE']):
            old_status = await db.hget(status_id, "status")
            await api.messages.send(peer_id=status_id,
                                    message=f"üì¢ –í–∞—à —Å—Ç–∞—Ç—É—Å –≤ –±–∞–Ω–∫–µ –∏–∑–º–µ–Ω–µ–Ω —Å <<{old_status.title()}>> "
                                            f"–Ω–∞ <<{new_status}>>",
                                    random_id=0)
            await db.hset(status_id, "status", new_status)
            await message.answer("‚úÖ –£—Å–ø–µ—à–Ω–æ!")
        else:
            await message.answer("‚ö† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")

        # –∑–∞–∫—Ä—ã—Ç–∏–µ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
        await state_dispenser.delete(message.peer_id)


# —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
@admin_rules.private_message(CommandRule("—Ç–æ–≤–∞—Ä", [''], 5))
async def product_rule(message: Message, args: Tuple[str]):
    if message.from_id == CONFIG['ADMIN']:
        if args[0].isdigit() and args[2].isdigit():
            ctx.set("product_cash", args[0])
            ctx.set("product_salesman", args[1])
            ctx.set("product_party", args[2])
            ctx.set("product_link", args[3])
            ctx.set("product_id", args[4])
            await state_dispenser.set(message.peer_id, Product.NAME)
            return "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞"
        else:
            await message.answer("‚ö† –üi—à–æ–≤ –Ω–∞—Ö—Ä–µ–Ω, I—Ä–∏—Å!")
    else:
        await message.answer("‚ö† –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ò–º–ø–µ—Ä—Å–∫–∏–º –∫–∞–∑–Ω–∞—á–µ–µ–º!")


# —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞ –∏—â–æ —Ä–∞–∑
@admin_rules.private_message(state=Product.NAME)
async def product_state(message: Message):
    async with Database(CONFIG['DB_URL']) as db:
        # –º—É–¥—Ä–µ–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Ç–æ–≤–∞—Ä–∞
        product = message.text.title() + '%' + \
                  ctx.get("product_cash") + '%' + \
                  ctx.get("product_salesman") + '%' + \
                  ctx.get("product_party") + '%' + \
                  ctx.get("product_link")

        # —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
        await db.hset("products", ctx.get("product_id"), product)
        await message.answer("‚úÖ –£—Å–ø–µ—à–Ω–æ!")

        # –æ–ø–æ–≤–µ—â–µ–Ω–∏–µ –ø—Ä–æ–¥–∞–≤—Ü–∞
        if ctx.get("product_salesman") != "coffer_cash":
            await api.messages.send(peer_id=ctx.get("product_salesman"),
                                    message=f"‚úÖ –í–∞—à —Ç–æ–≤–∞—Ä <<{message.text.title()}>> —É—Å–ø–µ—à–Ω–æ –≤—ã—Å—Ç–∞–≤–ª–µ–Ω –Ω–∞ —Ä—ã–Ω–∫–µ!\n"
                                            f"–°—Ç–æ–∏–º–æ—Å—Ç—å: {ctx.get('product_cash')} —Ñ–ª–æ–ø—Ü.\n"
                                            f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {ctx.get('product_party')}",
                                    random_id=0)

        # –∑–∞–∫—Ä—ã—Ç–∏–µ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
        await state_dispenser.delete(message.peer_id)


# —É–¥–∞–ª–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–∞
@admin_rules.private_message(CommandRule("—É–Ω–∏—á—Ç–æ–∂–∏—Ç—å", [''], 1))
async def destroy_rule(message: Message, args: Tuple[str]):
    if message.from_id == CONFIG['ADMIN']:
        async with Database(CONFIG['DB_URL']) as db:
            if args[0] in await db.hkeys("products"):
                await db.hdel("products", args[0])
                await message.answer("‚úÖ –£—Å–ø–µ—à–Ω–æ!")
            else:
                await message.answer("‚ö† –ù–µ –∑–Ω–∞—é —Ç–∞–∫–æ–≥–æ —Ç–æ–≤–∞—Ä–∞!")
    else:
        await message.answer("‚ö† –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ò–º–ø–µ—Ä—Å–∫–∏–º –∫–∞–∑–Ω–∞—á–µ–µ–º!")


# —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
@admin_rules.private_message(CommandRule("—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è", [''], 1))
async def reg_rule(message: Message, args: Tuple[str]):
    if message.from_id == CONFIG['ADMIN']:
        async with Database(CONFIG['DB_URL']) as db:
            if await db.exists(args[0]):
                await message.answer("‚ö† –≠—Ç–∞ –ø–µ—Ä—Å–æ–Ω–∞ —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω–∞!")
            else:
                # –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
                user_info = await api.users.get(args[0])
                name = user_info[0].first_name
                surname = user_info[0].last_name

                # —Å–æ–∑–¥–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
                user = {"status": "–û–±—ã–≤–∞—Ç–µ–ª—å",
                        "cash_f": 0,
                        "cash_m": 10,
                        "limit": 3,
                        "inventory": ''}

                await db.hmset(args[0], user)
                await message.answer("‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")

                # –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
                user = await db.hgetall(args[0])
                coffer_cash = await db.get('coffer_cash')
                await api.messages.send(peer_id=args[0],
                                        message="‚úÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!",
                                        random_id=0)
                await api.messages.send(peer_id=args[0],
                                        message=profile(name, surname, user, coffer_cash, args[0]),
                                        random_id=0)
    else:
        await message.answer("‚ö† –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ò–º–ø–µ—Ä—Å–∫–∏–º –∫–∞–∑–Ω–∞—á–µ–µ–º!")


# –≤—ã–¥–∞—á–∞ –≥—Ä–∞–Ω—Ç–æ–≤
@admin_rules.private_message(CommandRule("–≥—Ä–∞–Ω—Ç", [''], 1))
async def grants_rule(message: Message, args: Tuple[str]):
    if message.from_id == CONFIG['ADMIN']:
        async with Database(CONFIG['DB_URL']) as db:
            if await db.exists(args[0]) and args[0] not in CONFIG['IGNORE']:
                ctx.set("grant_id", args[0])
                await state_dispenser.set(message.peer_id, Grants.COFFER)
                return "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ –≤—ã–¥–µ–ª–∏—Ç—å –∏–∑ –∫–∞–∑–Ω—ã"
            else:
                await message.answer("‚ö† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
    else:
        await message.answer("‚ö† –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ò–º–ø–µ—Ä—Å–∫–∏–º –∫–∞–∑–Ω–∞—á–µ–µ–º!")


# –≤—ã–¥–µ–ª—è–µ–º—ã–µ –¥–µ–Ω—å–≥–∏
@admin_rules.private_message(state=Grants.COFFER)
async def grants_coffer(message: Message):
    ctx.set(Grants.COFFER, message.text)
    await state_dispenser.set(message.peer_id, Grants.SUMMA)
    return "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É, –∫–æ—Ç–æ—Ä—É—é –Ω—É–∂–Ω–æ —É–∫–∞–∑–∞—Ç—å –Ω–∞ –≥—Ä–∞–Ω—Ç–µ (–ø–∞ –ø—Ä–∏–∫–æ–ª—É)"


# –ø–∞—Ñ–æ—Å–Ω—ã–π —Ç–µ–∫—Å—Ç
@admin_rules.private_message(state=Grants.SUMMA)
async def grants_summa(message: Message):
    ctx.set(Grants.SUMMA, message.text)
    await state_dispenser.set(message.peer_id, Grants.TEXT)
    return "–í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è"


# final round
@admin_rules.private_message(state=Grants.TEXT)
async def grants_pil(message: Message):
    # —Ö—Ä–∞–Ω–∏–ª–∏—â–µ CTX –∏ –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_id = ctx.get("grant_id")
    coffer = int(ctx.get(Grants.COFFER))
    summa = ctx.get(Grants.SUMMA).upper()
    user_info = await api.users.get(user_id)
    name = user_info[0].first_name
    surname = user_info[0].last_name

    # –≤—ã–¥–µ–ª–µ–Ω–∏–µ –¥–µ–Ω–µ–≥ –∏–∑ –∫–∞–∑–Ω—ã
    async with Database(CONFIG['DB_URL']) as db:
        await db.set("coffer_cash", int(await db.get("coffer_cash")) - coffer)

    # –±–∞–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ–±—ä–µ–∫—Ç –±–∞–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ –∫–ª–∞—Å—Å–∞
    gr = GrantCreating("images/ticket.png")

    # —Å–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞–Ω—Ç–∞
    gr.add_font("fonts/AlumniSans-SemiBold.ttf", 70)
    gr.add_text((442, 937), str(random.randint(100000000, 1000000000)), (251, 247, 222))

    gr.add_font("fonts/Bitter-Medium.ttf", 45)
    gr.add_text((230, 775), user_id, (82, 81, 65))
    gr.add_text((720, 775), f"{name} {surname}", (82, 81, 65))
    gr.add_text((230, 660), summa, (82, 81, 65))

    photo = await uploader.upload(gr.upload())

    # –æ—Ç–ø—Ä–∞–≤–∫–∞ –≥—Ä–∞–Ω—Ç–∞
    await api.messages.send(peer_id=user_id,
                            message=f"üóû –ö–∞–∑–Ω–∞—á–µ–π—Å—Ç–≤–æ –≤—ã–¥–∞–ª–æ –≤–∞–º –≥—Ä–∞–Ω—Ç —Å —Ä–µ–ø–ª–∏–∫–æ–π:\n\n<<{message.text}>>",
                            attachment=photo,
                            random_id=0)
    await message.answer("‚úÖ –£—Å–ø–µ—à–Ω–æ!")

    # –∑–∞–∫—Ä—ã—Ç–∏–µ –º–∞—à–∏–Ω—ã —Å–æ—Å—Ç–æ—è–Ω–∏–π
    await state_dispenser.delete(message.peer_id)
    
