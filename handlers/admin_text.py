import pandas as pd
from database import Database
from plotly.figure_factory import create_table
from keyboards import admin_kb
from io import BytesIO
from config import CONFIG
from state_groups import (
    Recovery,
    Mailing
)
from vkbottle.bot import (
    Message,
    BotLabeler
)
from vk_api import (
    api,
    ctx,
    uploader,
    state_dispenser
)


# labeler
admin_text = BotLabeler()


# –≤—Å–µ –∏—Ç–∞–∫ –æ—á–µ–≤–∏–¥–Ω–æ
commands = '''
‚öô –ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:

!–Ω–∞–ª–æ–≥–∏ -- —Å–æ–±—Ä–∞—Ç—å –Ω–∞–ª–æ–≥–∏;

!–µ—Ä–µ—Ç–∏–∫ <ID> -- —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å;

!–∫–∞–∑–Ω–∞ <–æ—Ç> <–¥–æ> -- —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –¥–∏–∞–ø–∞–∑–æ–Ω –ø–æ–ø–æ–ª–Ω–µ–Ω–∏—è –∫–∞–∑–Ω—ã;

!–∑–∞–ø–ª–∞—Ç–∏—Ç—å <ID> <—Å—É–º–º–∞–§/–ú> -- –≤—ã–¥–∞—Ç—å –∂–∞–ª–æ–≤–∞–Ω–∏–µ;

!—Å—Ç–∞—Ç—É—Å <ID> -- —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å;

!—Ç–æ–≤–∞—Ä <—Ü–µ–Ω–∞> <ID> <–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ> <—Å—Å—ã–ª–∫–∞> -- —Å–æ–∑–¥–∞—Ç—å —Ç–æ–≤–∞—Ä;

!—É–Ω–∏—á—Ç–æ–∂–∏—Ç—å <ID —Ç–æ–≤–∞—Ä–∞> -- —É–Ω–∏—á—Ç–æ–∂–∏—Ç—å —Ç–æ–≤–∞—Ä;

!—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è <ID> -- —Å–æ–∑–¥–∞—Ç—å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å;

!–≥—Ä–∞–Ω—Ç <ID> -- –≤—ã–¥–∞—Ç—å –≥—Ä–∞–Ω—Ç;

*–ø—É—Å—Ç–æ–π –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –¥–ª—è –∫–æ–º–∞–Ω–¥—ã <<!–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ>> -- <<–Ω–∏—á–æ>>
'''


# –ø–∞–Ω–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@admin_text.private_message(text="–∞–¥–º–∏–Ω")
async def admin_panel(message: Message):
    if message.from_id == CONFIG['ADMIN']:
        await message.answer(commands, keyboard=admin_kb)
    else:
        await message.answer("‚ö† –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ò–º–ø–µ—Ä—Å–∫–∏–º –∫–∞–∑–Ω–∞—á–µ–µ–º!")


# —Ä–µ–µ—Å—Ç—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@admin_text.private_message(text="—Ä–µ–µ—Å—Ç—Ä")
async def admin_stat(message: Message):
    if message.from_id == CONFIG['ADMIN']:
        async with Database(CONFIG['DB_URL']) as db:
            stat = "üìã –†–µ–µ—Å—Ç—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:"
            keys = await db.keys()
            df = pd.DataFrame()
            ids = []
            name = []
            surname = []
            status = []
            cash_f = []
            cash_m = []
            limit = []
            for key in keys:
                if key not in CONFIG['IGNORE']:
                    user = await db.hgetall(key)
                    ids.append(key)

                    # –∏–º—è –∏ —Ñ–∞–º–∏–ª–∏—è
                    user_info = await api.users.get(key)
                    name.append(user_info[0].first_name)
                    surname.append(user_info[0].last_name)

                    # –ø—Ä–æ–±–ª–µ–º–Ω—ã–π —Å—Ç–∞—Ç—É—Å
                    if user['status'] == "–û–±—ã–≤–∞—Ç–µ–ª—å":
                        status.append("–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π")
                    else:
                        status.append("–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π")

                    cash_f.append(user['cash_f'])
                    cash_m.append(user['cash_m'])
                    limit.append(user['limit'])

            df['ID'] = ids
            df['–ò–º—è'] = name
            df['–§–∞–º–∏–ª–∏—è'] = surname
            df['–°—Ç–∞—Ç—É—Å'] = status
            df['–§–ª–æ–ø—Ü—ã'] = cash_f
            df['–ú–∞—Ä–∫–∏'] = cash_m
            df['–°—Ç–∞–≤–∫–∏ –≤ –∫–∞–∑–∏–Ω–æ'] = limit

            # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ —Ç–∞–±–ª–∏—Ü—ã
            fig = create_table(df)
            fig_bytes = fig.to_image(format="png")
            img = BytesIO(fig_bytes)
            img.seek(0)
            image = img.getvalue()
            img.close()
            photo = await uploader.upload(image)
            await message.reply(stat, attachment=photo)
    else:
        await message.answer("‚ö† –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ò–º–ø–µ—Ä—Å–∫–∏–º –∫–∞–∑–Ω–∞—á–µ–µ–º!")


# —Ä–µ–µ—Å—Ç—Ä —Å—Ç–∞—Ç—É—Å–æ–≤
@admin_text.private_message(text="—Å—Ç–∞—Ç—É—Å—ã")
async def admin_statuses(message: Message):
    if message.from_id == CONFIG['ADMIN']:
        async with Database(CONFIG['DB_URL']) as db:
            stat = "üìí –°—Ç–∞—Ç—É—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
            keys = await db.keys()

            for key in keys:
                if key not in CONFIG['IGNORE']:
                    user = await db.hgetall(key)
                    user_info = await api.users.get(key)
                    stat += f"{user_info[0].first_name} {user_info[0].last_name} ({key}) -- {user['status']}\n"

            await message.reply(stat)
            await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É !—Å—Ç–∞—Ç—É—Å <ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è>, —á—Ç–æ–±—ã —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å")
    else:
        await message.answer("‚ö† –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ò–º–ø–µ—Ä—Å–∫–∏–º –∫–∞–∑–Ω–∞—á–µ–µ–º!")


# —Å–±–æ—Ä –Ω–∞–ª–æ–≥–æ–≤
@admin_text.private_message(text=["–Ω–∞–ª–æ–≥", "–Ω–∞–ª–æ–≥–∏"])
async def admin_taxes(message: Message):
    if message.from_id == CONFIG['ADMIN']:
        async with Database(CONFIG['DB_URL']) as db:
            # —Ñ—É–Ω–∫—Ü–∏—è —Å–±–æ—Ä–∞ –Ω–∞–ª–æ–≥–æ–≤ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ —Å–±–æ—Ä–∞ –Ω–∞–ª–æ–≥–æ–≤
            async def tax(cash_f, cash_m, text):
                tax_f = round(int(cash_f) * 0.2)
                tax_m = round(int(cash_m) * 0.1)
                cash_f = int(cash_f) - tax_f
                cash_m = int(cash_m) - tax_m

                # —Å–±–æ—Ä –Ω–∞–ª–æ–≥–æ–≤
                if tax_m > 0:
                    await db.hset(key, "cash_m", cash_m)
                    await db.incrby("coffer_cash", tax_m * int(await db.get("mark")))
                if tax_f > 0:
                    await db.hset(key, "cash_f", cash_f)
                    await db.incrby("coffer_cash", tax_f)

                # –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
                await api.messages.send(peer_id=key,
                                        message=f"üì¢ –° –≤–∞—Å —Å–æ–±—Ä–∞–Ω –Ω–∞–ª–æ–≥: {text}",
                                        random_id=0)

            for key in await db.keys():
                if key not in CONFIG['IGNORE'] and key != '1':
                    cash_ff = await db.hget(key, "cash_f")
                    cash_mm = await db.hget(key, "cash_m")
                    if round(int(cash_ff) * 0.15) <= 0 < round(int(cash_mm) * 0.05):
                        await tax(cash_ff, cash_mm, f"{round(int(cash_mm) * 0.05)} –º–∞—Ä–∫.")
                    elif round(int(cash_ff) * 0.15) > 0 >= round(int(cash_mm) * 0.05):
                        await tax(cash_ff, cash_mm, f"{round(int(cash_ff) * 0.15)} —Ñ–ª–æ–ø—Ü.")
                    elif round(int(cash_ff) * 0.15) > 0 < round(int(cash_mm) * 0.05):
                        await tax(cash_ff, cash_mm, f"{round(int(cash_mm) * 0.05)} –º–∞—Ä–∫. –∏ "
                                                    f"{round(int(cash_ff) * 0.15)} —Ñ–ª–æ–ø—Ü.")
                    else:
                        await api.messages.send(peer_id=key,
                                                message=f"üì¢ –ù–∞–ª–æ–≥–∞ –Ω–µ –±—É–¥–µ—Ç, –Ω–æ –≤—ã –Ω–µ —Ä–∞—Å—Å—Ç—Ä–∞–∏–≤–∞–π—Ç–µ—Å—å!",
                                                random_id=0)
            await message.answer("‚úÖ –£—Å–ø–µ—à–Ω–æ!")
    else:
        await message.answer("‚ö† –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ò–º–ø–µ—Ä—Å–∫–∏–º –∫–∞–∑–Ω–∞—á–µ–µ–º!")


# —Ä–µ–µ—Å—Ç—Ä –∫–ª—é—á–µ–π
@admin_text.private_message(text="–∫–ª—é—á–∏")
async def admin_keys(message: Message):
    if message.from_id == CONFIG['ADMIN']:
        async with Database(CONFIG['DB_URL']) as db:
            keys = await db.keys()
            cap = "üîë –ö–ª—é—á–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö:\n\n"
            for key in keys:
                cap += f"{key}\n"

        # –≤—ã–≤–æ–¥ —Ä–µ–µ—Å—Ç—Ä–∞
        await message.reply(cap)
    else:
        await message.answer("‚ö† –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ò–º–ø–µ—Ä—Å–∫–∏–º –∫–∞–∑–Ω–∞—á–µ–µ–º!")


# —Ä–µ–µ—Å—Ç—Ä –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ–π
@admin_text.private_message(text="–∏–Ω–≤–µ–Ω—Ç–∞—Ä–∏")
async def admin_inventory(message: Message):
    if message.from_id == CONFIG['ADMIN']:
        text = "ü•¨ –ò–Ω–≤–µ–Ω—Ç–∞—Ä–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"

        async with Database(CONFIG['DB_URL']) as db:
            for key in (await db.keys()):
                if key not in CONFIG['IGNORE'] and key != '1':
                    val = await db.hgetall(key)
                    if val['inventory'] != '':
                        val = val['inventory'].split('%')[1:]

                        user_info = await api.users.get(key)
                        name = user_info[0].first_name
                        surname = user_info[0].last_name

                        text += f"{name} {surname} ({key}):\n"
                        for v in val:
                            v = v.split('&')
                            text += f"-- {v[0]} (x{v[1]}, ID: {v[2]})\n"
                        text += "\n"

        await message.reply(text)
    else:
        await message.answer("‚ö† –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ò–º–ø–µ—Ä—Å–∫–∏–º –∫–∞–∑–Ω–∞—á–µ–µ–º!")


# —Ñ—É–Ω–∫—Ü–∏—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è
@admin_text.private_message(text=["–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ", "–≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å"])
async def admin_recovery_message(message: Message):
    if message.from_id == CONFIG['ADMIN']:
        await state_dispenser.set(message.peer_id, Recovery.ID)
        return "–í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
    else:
        await message.answer("‚ö† –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ò–º–ø–µ—Ä—Å–∫–∏–º –∫–∞–∑–Ω–∞—á–µ–µ–º!")


# —Å–æ—Å—Ç–æ—è–Ω–∏–µ ID
@admin_text.private_message(state=Recovery.ID)
async def recovery_id(message: Message):
    async with Database(CONFIG['DB_URL']) as db:
        ctx.set(Recovery.ID, message.text)
        if ctx.get("recovery_id") in await db.keys():
            await message.answer("‚ö† –≠—Ç–æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –ø—Ä–æ—à–µ–ª —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é")
        else:
            await state_dispenser.set(message.peer_id, Recovery.STATUS)
            return "–í–≤–µ–¥–∏—Ç–µ —Å—Ç–∞—Ç—É—Å"


# —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
@admin_text.private_message(state=Recovery.STATUS)
async def recovery_status(message: Message):
    ctx.set(Recovery.STATUS, message.text)
    await state_dispenser.set(message.peer_id, Recovery.CASH_F)
    return "–í–≤–µ–¥–∏—Ç–µ –±–∞–ª–∞–Ω—Å —Ñ–ª–æ–ø—Ü–µ–≤"


# —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ —Ñ–ª–æ–ø—Ü–µ–≤
@admin_text.private_message(state=Recovery.CASH_F)
async def recovery_flops(message: Message):
    ctx.set(Recovery.CASH_F, message.text)
    await state_dispenser.set(message.peer_id, Recovery.CASH_M)
    return "–í–≤–µ–¥–∏—Ç–µ –±–∞–ª–∞–Ω—Å –º–∞—Ä–æ–∫"


# —Å–æ—Å—Ç–æ—è–Ω–∏–µ –±–∞–ª–∞–Ω—Å–∞ –º–∞—Ä–æ–∫
@admin_text.private_message(state=Recovery.CASH_M)
async def recovery_marks(message: Message):
    ctx.set(Recovery.CASH_M, message.text)
    await state_dispenser.set(message.peer_id, Recovery.LIMIT)
    return "–í–≤–µ–¥–∏—Ç–µ –ª–∏–º–∏—Ç –Ω–∞ —Å—Ç–∞–≤–∫–∏ –≤ –∫–∞–∑–∏–Ω–æ"


# —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ª–∏–º–∏—Ç–∞ —Å—Ç–∞–≤–æ–∫ –≤ –∫–∞–∑–∏–Ω–æ
@admin_text.private_message(state=Recovery.LIMIT)
async def recovery_limit(message: Message):
    ctx.set(Recovery.LIMIT, message.text)
    await state_dispenser.set(message.peer_id, Recovery.INVENTORY)
    return "–í–≤–µ–¥–∏—Ç–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å"


# –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
@admin_text.private_message(state=Recovery.INVENTORY)
async def recovery_inventory(message: Message):
    async with Database(CONFIG['DB_URL']) as db:
        if message.text == "–Ω–∏—á–æ":
            message.text = ''

        user = {"status": ctx.get(Recovery.STATUS).title(),
                "cash_f": ctx.get(Recovery.CASH_F),
                "cash_m": ctx.get(Recovery.CASH_M),
                "limit": ctx.get(Recovery.LIMIT),
                "inventory": '%' + message.text.title()}

        await db.hmset(ctx.get(Recovery.ID), user)
        await message.answer("‚úÖ –ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")

        # –∏ –≤—Å–µ
        await state_dispenser.delete(message.peer_id)


# –ª—é—Ç–µ–π—à–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞
@admin_text.private_message(text="—Ä–∞—Å—Å—ã–ª–∫–∞")
async def mailing_text(message: Message):
    if message.from_id == CONFIG['ADMIN']:
        await state_dispenser.set(message.peer_id, Mailing.TEXT)
        return "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Ä–∞—Å—Å—ã–ª–∫–∏"
    else:
        await message.answer("‚ö† –í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –ò–º–ø–µ—Ä—Å–∫–∏–º –∫–∞–∑–Ω–∞—á–µ–µ–º!")


# —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–∏
@admin_text.private_message(state=Mailing.TEXT)
async def mailing_state(message: Message):
    async with Database(CONFIG['DB_URL']) as db:
        keys = await db.keys()
        for key in keys:
            if key not in CONFIG['IGNORE'] and key != '1':
                await api.messages.send(peer_id=key,
                                        message=f"üì¢ –ì–æ—Å—É–¥–∞—Ä—Å—Ç–≤–µ–Ω–Ω–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞:\n\n<<{message.text}>>",
                                        random_id=0)

        await message.answer("‚úÖ –£—Å–ø–µ—à–Ω–æ!")
    
