import random
from database import Database
from typing import Tuple
from vk_api import api
from vkbottle.dispatch.rules.base import CommandRule
from vkbottle.bot import (
    Message,
    BotLabeler
)
from config import CONFIG


# labeler
main_rules = BotLabeler()


# –ø–µ—Ä–µ–≤–æ–¥—ã
@main_rules.message(CommandRule("–ø–µ—Ä–µ–≤–µ—Å—Ç–∏", [''], 3))
async def translation_rule(message: Message, args: Tuple[str]):
    async with Database(CONFIG['DB_URL']) as db:
        # –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_id = message.from_id
        user_info = await api.users.get(user_id)
        name = user_info[0].first_name
        surname = user_info[0].last_name

        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –ø—Ä–æ—Ñ–∏–ª—è
        if await db.exists(user_id):
            if await db.exists(args[0]) and args[0] not in CONFIG['IGNORE']:
                if str(user_id) != args[0]:
                    if args[1].isdigit():
                        # —Ñ—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ —Ñ—É–Ω–∫—Ü–∏–∏ –ø–µ—Ä–µ–≤–æ–¥–∞
                        async def translation(csh, one_type, two_type):
                            csh = int(csh) - int(args[1])
                            await db.hset(user_id, one_type, csh)
                            await db.hincrby(args[0], one_type, args[1])

                            # –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
                            await message.answer("‚úÖ –£—Å–ø–µ—à–Ω–æ!")
                            return await api.messages.send(peer_id=args[0], message=f"üí∏ {name} {surname}"
                                                                                    f" –ø–µ—Ä–µ–≤–µ–ª –≤–∞–º {args[1]} "
                                                                                    f"{two_type}", random_id=0)
                        # –ø–µ—Ä–µ–≤–æ–¥ —Ñ–ª–æ–ø—Ü–µ–≤
                        if args[2] in ("—Ñ–ª–æ–ø—Ü–µ–≤", "—Ñ–ª–æ–ø–µ—Ü", "—Ñ–ª–æ–ø—Ü–∞"):
                            cash = await db.hget(user_id, "cash_f")
                            if 0 < int(args[1]) <= int(cash):
                                await translation(cash, "cash_f", "—Ñ–ª–æ–ø—Ü.")
                            else:
                                await message.answer("‚ö† –ü—à–µ–ª –≤–æ–Ω –æ—Ç—Å—é–¥–∞!")

                        # –ø–µ—Ä–µ–≤–æ–¥ –º–∞—Ä–æ–∫
                        elif args[2] in ("–º–∞—Ä–æ–∫", "–º–∞—Ä–∫—É", "–º–∞—Ä–∫–∏"):
                            cash = await db.hget(user_id, "cash_m")
                            if 0 < int(args[1]) <= int(cash):
                                await translation(cash, "cash_m", "–º–∞—Ä–∫.")
                            else:
                                await message.answer("‚ö† –ü—à–µ–ª –≤–æ–Ω –æ—Ç—Å—é–¥–∞!")
                        else:
                            await message.answer("‚ö† –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!")
                    else:
                        await message.answer("‚ö† –ü—à–µ–ª –≤–æ–Ω –æ—Ç—Å—é–¥–∞!")
                else:
                    await message.answer("‚ö† –ó–∞—á–µ–º —Å–µ–±–µ –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å?!")
            else:
                await message.answer("‚ö† –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        else:
            await message.answer("‚ö† –í—ã –Ω–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª–∏—Å—å —Å–∏—Å—Ç–µ–º–µ!")


# –æ–±–º–µ–Ω–Ω–∞—è –ª–∞–≤–∫–∞
@main_rules.message(CommandRule("–æ–±–º–µ–Ω—è—Ç—å", [''], 2))
async def exchange_rule(message: Message, args: Tuple[str]):
    async with Database(CONFIG['DB_URL']) as db:
        # –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_id = message.from_id

        if await db.exists(user_id):
            if args[0].isdigit():

                # –æ–±–º–µ–Ω –º–∞—Ä–æ–∫
                if args[1] in ("–º–∞—Ä–æ–∫", "–º–∞—Ä–∫–∏", "–º–∞—Ä–∫—É"):
                    marks = await db.hget(user_id, "cash_m")
                    if int(marks) >= int(args[0]) > 0:
                        flops = int(args[0]) * int(await db.get("mark"))
                        marks = int(marks) - int(args[0])
                        await db.hincrby(user_id, "cash_f", flops)
                        await db.hset(user_id, "cash_m", marks)
                        await message.answer(f"‚úÖ –£—Å–ø–µ—à–Ω–æ! –í—ã –ø–æ–ª—É—á–∏–ª–∏ {flops} —Ñ–ª–æ–ø—Ü.")
                    else:
                        await message.answer("‚ö† –ò–¥–∏ –Ω–∞ –∑–∞–≤–æ–¥ —Ä–∞–±–æ—Ç–∞—Ç—å!")

                # –æ–±–º–µ–Ω —Ñ–ª–æ–ø—Ü–µ–≤
                elif args[1] in ("—Ñ–ª–æ–ø—Ü–µ–≤", "—Ñ–ª–æ–ø—Ü–∞", "—Ñ–ª–æ–ø–µ—Ü"):
                    flops = await db.hget(user_id, "cash_f")
                    mark = await db.get("mark")

                    # –ø—Ä–æ–≤–µ—Ä–∫–∞ —Ü–µ–Ω–Ω–æ—Å—Ç–∏ –º–∞—Ä–∫–∏
                    if int(flops) >= int(args[0]) > 0:
                        if int(args[0]) < int(mark):
                            await message.answer("‚ö† –í–≤–µ–¥–µ–Ω–Ω–∞—è —Å—É–º–º–∞ –º–µ–Ω—å—à–µ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –º–∞—Ä–∫–∏!")
                        else:
                            marks = int(args[0]) // int(mark)
                            remainder = int(args[0]) % int(mark)
                            flops = int(flops) - int(args[0]) + remainder
                            await db.hincrby(user_id, "cash_m", marks)
                            await db.hset(user_id, "cash_f", flops)

                            # –∞–¥–µ–∫–≤–∞—Ç–∏–∑–∞—Ü–∏—è –æ—Å—Ç–∞—Ç–∫–∞
                            if remainder != 0:
                                await message.answer(f"‚úÖ –£—Å–ø–µ—à–Ω–æ! –í—ã –ø–æ–ª—É—á–∏–ª–∏ {marks} –º–∞—Ä–∫. –∏ {remainder} —Ñ–ª–æ–ø—Ü.")
                            else:
                                await message.answer(f"‚úÖ –£—Å–ø–µ—à–Ω–æ! –í—ã –ø–æ–ª—É—á–∏–ª–∏ {marks} –º–∞—Ä–∫.")
                    else:
                        await message.answer("‚ö† –ò–¥–∏ –Ω–∞ –∑–∞–≤–æ–¥ —Ä–∞–±–æ—Ç–∞—Ç—å!")
                else:
                    await message.answer("‚ö† –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!")
            else:
                await message.answer("‚ö† –í—ã –≤—ã—Å—Ä–∞–ª–∏ –¥–∏—á—å!")
        else:
            await message.answer("‚ö† –í—ã –Ω–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª–∏—Å—å —Å–∏—Å—Ç–µ–º–µ!")


# –ø—Ä–∏–æ–±—Ä–µ—Ç–µ–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤
@main_rules.message(CommandRule("–∫—É–ø–∏—Ç—å", [''], 1))
async def buy_rule(message: Message, args: Tuple[str]):
    async with Database(CONFIG['DB_URL']) as db:
        if await db.exists(message.from_id):
            if args[0] in await db.hkeys("products"):
                # —ç–ª–µ–º–µ–Ω—Ç—ã —Ç–æ–≤–∞—Ä–∞
                product = await db.hget("products", args[0])
                product = product.split('%')

                # –∑–∞–ø—Ä–µ—â–∞—é –≤–∞–º –ø–æ–∫—É–ø–∞—Ç—å —Å–≤–æ–∏ —Ç–æ–≤–∞—Ä—ã!
                if str(message.from_id) != product[2]:
                    # –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω—É–∂–Ω–æ–π —Å—É–º–º—ã
                    if int(product[1]) <= int(await db.hget(message.from_id, "cash_f")):
                        # –∫–∞–∑–Ω–∞—á–µ–π—Å–∫–∏–π –ª–∏ —Ç–æ–≤–∞—Ä? –¥–µ–Ω–µ–∂–Ω—ã–π –æ–±–º–µ–Ω
                        if product[2] == "coffer_cash":
                            await db.incrby("coffer_cash", product[1])
                        else:
                            salary = round(int(product[1]) * 0.7)
                            await db.hincrby(product[2], "cash_f", salary)
                            await db.incrby("coffer_cash", round(int(product[1]) * 0.3))

                        await db.hset(message.from_id, "cash_f",
                                      int(await db.hget(message.from_id, "cash_f")) - int(product[1]))

                        # –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
                        products = (await db.hget(message.from_id, "inventory")).split('%')

                        # —Å–ø–∏—Å–æ–∫ ID —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∏–Ω–≤–µ–Ω—Ç–∞—Ä–µ
                        ids = list()
                        for p in products[1:]:
                            ids.append(p.split('&')[2])

                        if args[0] not in ids:
                            await db.hset(message.from_id, "inventory",
                                          await db.hget(message.from_id, "inventory") + '%' + product[0] + '&' + '1'
                                          + '&' + args[0])
                        else:
                            index = 0
                            for p in products[1:]:
                                index += 1
                                p = p.split('&')
                                if p[2] == args[0]:
                                    p[1] = str(int(p[1]) + 1)
                                    p = '&'.join(p)
                                    products[index] = p
                                    break

                            await db.hset(message.from_id, "inventory", '%'.join(products))

                        # —É–º–µ–Ω—å—à–µ–Ω–∏–µ –ø–∞—Ä—Ç–∏–∏ —Ç–æ–≤–∞—Ä–∞
                        product[3] = str(int(product[3]) - 1)
                        if product[3] == '0':
                            await db.hdel("products", args[0])
                        else:
                            await db.hset("products", args[0], '%'.join(product))

                        # —É—Å–ø–µ—Ö (–∞–∑–∞—Ç–∏—â–µ –∏–º–±–∞)
                        await message.answer("‚úÖ –£—Å–ø–µ—à–Ω–æ!")

                        # –æ–ø–æ–≤–µ—Å—Ç–∏—Ç—å –ø—Ä–æ–¥–∞–≤—Ü–∞
                        user_info = await api.users.get(message.from_id)
                        name, surname, text = user_info[0].first_name, user_info[0].last_name, "–í—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏:"
                        if product[2] == "coffer_cash":
                            product[2] = CONFIG['ADMIN']
                            text = "–ö–∞–∑–Ω–∞ –ø–æ–ø–æ–ª–Ω–µ–Ω–∞ –Ω–∞:"
                            salary = product[1]

                        await api.messages.send(peer_id=product[2],
                                                message=f"üì¢ {name} {surname} –ø—Ä–∏–æ–±—Ä–µ–ª <<{product[0]}>>!\n"
                                                        f"{text} {salary} —Ñ–ª–æ–ø—Ü.",
                                                random_id=0)
                    else:
                        await message.answer("‚ö† –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ñ–ª–æ–ø—Ü–µ–≤!")
                else:
                    await message.answer("‚ö† –Ø –≤–∞–º –∑–∞–ø—Ä–µ—â–∞—é –ø–æ–∫—É–ø–∞—Ç—å —Å–≤–æ–π —Ç–æ–≤–∞—Ä!")
            else:
                await message.answer("‚ö† –≠—Ç–æ —à–æ –∑–∞ —Ç–æ–≤–∞—Ä?")
        else:
            await message.answer("‚ö† –í—ã –Ω–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª–∏—Å—å —Å–∏—Å—Ç–µ–º–µ!")


# —É–¥–æ–ª—ã—Ç—å —Ç–æ–≤–∞—Ä
@main_rules.message(CommandRule("—É–¥–∞–ª–∏—Ç—å", [''], 1))
@main_rules.message(CommandRule("—É–¥–æ–ª—ã—Ç—å", [''], 1))
async def del_rule(message: Message, args: Tuple[str]):
    async with Database(CONFIG['DB_URL']) as db:
        products = (await db.hget(message.from_id, "inventory")).split('%')
        index = 0
        counter = 0

        for i in products[1:]:
            index += 1
            for j in i.split('&')[2]:

                if args[0] == j:
                    counter += 1
                    product = products[index].split('&')

                    if product[1] == '1':
                        del products[index]
                    else:
                        product[1] = str(int(product[1]) - 1)
                        products[index] = '&'.join(product)
                        await db.hset(message.from_id, "inventory", '%'.join(products))

        if counter > 0:
            await db.hset(message.from_id, "inventory", '%'.join(products))
            await message.answer("‚úÖ –£—Å–ø–µ—à–Ω–æ!")
        else:
            await message.answer("‚ö† –≠—Ç–æ —à–æ –∑–∞ –ø—Ä–µ–¥–º–µ—Ç?")


# –∫–∞–∑–∏–Ω–æ
@main_rules.message(CommandRule("—Ä—É–ª–µ—Ç–∫–∞", [''], 2))
async def casino_rule(message: Message, args: Tuple[str]):
    async with Database(CONFIG['DB_URL']) as db:
        # –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_id = message.from_id
        if await db.exists(user_id):

            # –ø–æ–∏–≥—Ä–∞–ª –∏ —Ö–≤–∞—Ç–∏—Ç
            if int(await db.hget(user_id, "limit")) <= 0:
                await message.reply("üé± –ü–æ–∏–≥—Ä–∞–ª –∏ —Ö–≤–∞—Ç–∏—Ç. –ñ–¥–∏ –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è")
            else:
                # –≤–∞—Ä–∏–∞–Ω—Ç—ã –¥–ª—è —Å—Ç–∞–≤–∫–∏
                options = {"even": ("—á–µ—Ç", "—á—ë—Ç", "—á–µ—Ç–Ω–æ–µ", "—á—ë—Ç–Ω–æ–µ"),
                           "odd": ("–Ω–µ—á—ë—Ç–Ω–æ–µ", "–Ω–µ—á–µ—Ç", "–Ω–µ—á–µ—Ç–Ω–æ–µ", "–Ω–µ—á—ë—Ç"),
                           "red": ("–∫—Ä–∞—Å–Ω—ã–π", '–∫'),
                           "black": ("—á–µ—Ä–Ω—ã–π", "—á—ë—Ä–Ω—ã–π", '—á'),
                           "one halve": "1-18",
                           "two halve": "19-36",
                           "one third": "1st",
                           "two third": "2nd",
                           "three third": "3rd",
                           "one dozen": "1-12",
                           "two dozen": "13-24",
                           "three dozen": "25-36",
                           "number": tuple(range(1, 37))}

                def roulette():
                    colors = {'red': (1, 3, 5, 7, 9, 12, 14, 16, 19, 21, 23, 25, 27, 30, 32, 34, 36, 0),
                              'black': (2, 4, 6, 8, 11, 13, 15, 17, 20, 22, 24, 26, 29, 28, 31, 33, 35)}

                    random_color = random.choice(tuple(colors))
                    color = list()
                    color.append(random.choice(colors[random_color]))
                    color.append(random_color)
                    return color

                # —Ñ—É–Ω–∫—Ü–∏—è –ø–æ—Ä–∞–∂–µ–Ω–∏—è
                async def db_defeat(type_num):
                    csh = await db.hget(user_id, "cash_f")
                    csh = int(csh) - int(args[0])
                    await db.hset(user_id, "cash_f", csh)
                    await db.hset(user_id, "limit", int(await db.hget(user_id, "limit")) - 1)
                    await db.incrby("coffer_cash", args[0])
                    await message.reply(f"üé± –®–∞—Ä –ø—Ä–∏–∑–µ–º–ª–∏–ª—Å—è –Ω–∞ {num[0]}, {type_num}. –í—ã –ø—Ä–æ–∏–≥—Ä–∞–ª–∏ –∏ —Ç–µ—Ä—è–µ—Ç–µ "
                                        f"—Å—Ç–∞–≤–∫—É!\n–û—Å—Ç–∞–ª–æ—Å—å —Å—Ç–∞–≤–æ–∫: {await db.hget(user_id, 'limit')}")

                # —Ñ—É–Ω–∫—Ü–∏—è –ø–æ–±–µ–¥—ã
                async def db_win(factor, type_num):
                    csh = await db.hget(user_id, "cash_f")
                    csh = int(csh) - int(args[0]) + int(args[0]) * factor
                    await db.hset(user_id, "cash_f", csh)
                    await db.hset(user_id, "limit", int(await db.hget(user_id, "limit")) - 1)
                    await message.reply(f"üé± –®–∞—Ä –ø—Ä–∏–∑–µ–º–ª–∏–ª—Å—è –Ω–∞ {num[0]}, {type_num}. –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ {win} "
                                        f"—Ñ–ª–æ–ø—Ü.!\n–û—Å—Ç–∞–ª–æ—Å—å —Å—Ç–∞–≤–æ–∫: {await db.hget(user_id, 'limit')}")

                if args[0].isdigit() >= 0:
                    if int(await db.hget(user_id, "cash_f")) >= int(args[0]) > 0:
                        if args[1] in str(options.values())[13:-2]:
                            num = roulette()
                            if num[0] == 0:
                                await message.answer("üé± –®–∞—Ä –ø—Ä–∏–∑–µ–º–ª–∏–ª—Å—è –Ω–∞ –Ω–æ–ª—å! –í—ã –æ—Å—Ç–∞–µ—Ç–µ—Å—å –ø—Ä–∏ —Å–≤–æ–∏—Ö")
                            else:
                                # —á–µ—Ç–Ω–æ—Å—Ç—å
                                if args[1] in options['even']:
                                    win = int(args[0]) * 2
                                    if num[0] % 2 == 0:
                                        await db_win(2, "—á–∏—Å–ª–æ —á–µ—Ç–Ω–æ–µ")
                                    else:
                                        await db_defeat("—á–∏—Å–ª–æ –Ω–µ—á–µ—Ç–Ω–æ–µ")

                                # –Ω–µ—á–µ—Ç–Ω–æ—Å—Ç—å
                                elif args[1] in options['odd']:
                                    win = int(args[0]) * 2
                                    if num[0] % 2 == 1:
                                        await db_win(2, "—á–∏—Å–ª–æ –Ω–µ—á–µ—Ç–Ω–æ–µ")
                                    else:
                                        await db_defeat("—á–∏—Å–ª–æ —á–µ—Ç–Ω–æ–µ")

                                # –∫—Ä–∞—Å–Ω—ã–π
                                elif args[1] in options['red']:
                                    win = int(args[0]) * 2
                                    if num[1] == "red":
                                        await db_win(2, "—Ü–≤–µ—Ç –∫—Ä–∞—Å–Ω—ã–π")
                                    else:
                                        await db_defeat("—Ü–≤–µ—Ç —á–µ—Ä–Ω—ã–π")

                                # —á–µ—Ä–Ω—ã–π
                                elif args[1] in options['black']:
                                    win = int(args[0]) * 2
                                    if num[1] == "black":
                                        await db_win(2, "—Ü–≤–µ—Ç —á–µ—Ä–Ω—ã–π")
                                    else:
                                        await db_defeat("—Ü–≤–µ—Ç –∫—Ä–∞—Å–Ω—ã–π")

                                # –ø–µ—Ä–≤–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞
                                elif args[1] == options['one halve']:
                                    win = int(args[0]) * 2
                                    if int(num[0]) in tuple(range(1, 19)):
                                        await db_win(2, "–ø–æ–ª–æ–≤–∏–Ω–∞ 1-18")
                                    else:
                                        await db_defeat("–ø–æ–ª–æ–≤–∏–Ω–∞ 19-36")

                                # –≤—Ç–æ—Ä–∞—è –ø–æ–ª–æ–≤–∏–Ω–∞
                                elif args[1] == options['two halve']:
                                    win = int(args[0]) * 2
                                    if int(num[0]) in tuple(range(19, 37)):
                                        await db_win(2, "–ø–æ–ª–æ–≤–∏–Ω–∞ 19-36")
                                    else:
                                        await db_defeat("–ø–æ–ª–æ–≤–∏–Ω–∞ 1-18")

                                # –ø–µ—Ä–≤–∞—è —Ç—Ä–µ—Ç—å
                                elif args[1] == options['one third']:
                                    win = int(args[0]) * 3
                                    if int(num[0]) in tuple(range(1, 35, 3)):
                                        await db_win(3, "–ø–µ—Ä–≤–∞—è –∫–æ–ª–æ–Ω–Ω–∞")
                                    elif int(num[0]) in tuple(range(2, 36, 3)):
                                        await db_defeat("–≤—Ç–æ—Ä–∞—è –∫–æ–ª–æ–Ω–Ω–∞")
                                    else:
                                        await db_defeat("—Ç—Ä–µ—Ç—å—è –∫–æ–ª–æ–Ω–Ω–∞")

                                # –≤—Ç–æ—Ä–∞—è —Ç—Ä–µ—Ç—å
                                elif args[1] == options['two third']:
                                    win = int(args[0]) * 3
                                    if int(num[0]) in tuple(range(2, 36, 3)):
                                        await db_win(3, "–≤—Ç–æ—Ä–∞—è –∫–æ–ª–æ–Ω–Ω–∞")
                                    elif int(num[0]) in tuple(range(1, 35, 3)):
                                        await db_defeat("–ø–µ—Ä–≤–∞—è –∫–æ–ª–æ–Ω–Ω–∞")
                                    else:
                                        await db_defeat("—Ç—Ä–µ—Ç—å—è –∫–æ–ª–æ–Ω–Ω–∞")

                                # —Ç—Ä*—Ç—å—è —Ç—Ä–µ—Ç—å
                                elif args[1] == options['three third']:
                                    win = int(args[0]) * 3
                                    if int(num[0]) in tuple(range(3, 37, 3)):
                                        await db_win(3, "—Ç—Ä–µ—Ç—å—è –∫–æ–ª–æ–Ω–Ω–∞")
                                    elif int(num[0]) in tuple(range(2, 36, 3)):
                                        await db_defeat("–≤—Ç–æ—Ä–∞—è –∫–æ–ª–æ–Ω–Ω–∞")
                                    else:
                                        await db_defeat("–ø–µ—Ä–≤–∞—è –∫–æ–ª–æ–Ω–Ω–∞")

                                # –ø–µ—Ä–≤–∞—è –¥—é–∂–∏–Ω–∞
                                elif args[1] == options['one dozen']:
                                    win = int(args[0]) * 3
                                    if int(num[0]) in tuple(range(1, 13)):
                                        await db_win(3, "–ø–µ—Ä–≤–∞—è –¥—é–∂–∏–Ω–∞")
                                    elif int(num[0]) in tuple(range(13, 25)):
                                        await db_defeat("–≤—Ç–æ—Ä–∞—è –¥—é–∂–∏–Ω–∞")
                                    else:
                                        await db_defeat("—Ç—Ä–µ—Ç—å—è –¥—é–∂–∏–Ω–∞")

                                # –≤—Ç–æ—Ä–∞—è –¥—é–∂–∏–Ω–∞
                                elif args[1] == options['two dozen']:
                                    win = int(args[0]) * 3
                                    if int(num[0]) in tuple(range(13, 25)):
                                        await db_win(3, "–≤—Ç–æ—Ä–∞—è –¥—é–∂–∏–Ω–∞")
                                    elif int(num[0]) in tuple(range(1, 13)):
                                        await db_defeat("–ø–µ—Ä–≤–∞—è –¥—é–∂–∏–Ω–∞")
                                    else:
                                        await db_defeat("—Ç—Ä–µ—Ç—å—è –¥—é–∂–∏–Ω–∞")

                                # —Ç—Ä–µ—Ç—å—è –¥—é–∂–∏–Ω–∞
                                elif args[1] == options['three dozen']:
                                    win = int(args[0]) * 3
                                    if int(num[0]) in tuple(range(25, 37)):
                                        await db_win(3, "—Ç—Ä–µ—Ç—å—è –¥—é–∂–∏–Ω–∞")
                                    elif int(num[0]) in tuple(range(13, 25)):
                                        await db_defeat("–≤—Ç–æ—Ä–∞—è –¥—é–∂–∏–Ω–∞")
                                    else:
                                        await db_defeat("–ø–µ—Ä–≤–∞—è –¥—é–∂–∏–Ω–∞")

                                # —Ç–æ—á–Ω–æ–µ —á–∏—Å–ª–æ
                                elif args[1].isdigit():
                                    if int(args[1]) in options['number']:
                                        win = int(args[0]) * 36
                                        if num[0] == int(args[1]):
                                            await db_win(36, f"–≤–∞—à–µ —á–∏—Å–ª–æ -- {args[1]}")
                                        else:
                                            await db_defeat(f"–≤–∞—à–µ —á–∏—Å–ª–æ -- {args[1]}")
                        else:
                            await message.answer("‚ö† –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç!")
                    else:
                        await message.answer(random.choice(("‚ö† –í–∏ –≤–∏–∑—Ä—ñ–ª–∏ –¥–∏—á–∏–Ω—É!", "‚ö† –í—ã –≤—ã—Å—Ä–∞–ª–∏ –¥–∏—á—å!",
                                                            "‚ö† –í—ã –≤—ã—Å—Ä–∞–ª—ñ –¥–∑—ñ—á—ã–Ω—É!", "‚ö† J≈´s izjaukƒÅt spƒìli!",
                                                            "‚ö† –ó–∞—ò–µ–±–∞–æ —Å–∏ –∏–≥—Ä—É!")))
                else:
                    await message.answer(random.choice(("‚ö† –í–∏ –≤–∏–∑—Ä—ñ–ª–∏ –¥–∏—á–∏–Ω—É!", "‚ö† –í—ã –≤—ã—Å—Ä–∞–ª–∏ –¥–∏—á—å!",
                                                        "‚ö† –í—ã –≤—ã—Å—Ä–∞–ª—ñ –¥–∑—ñ—á—ã–Ω—É!", "‚ö† J≈´s izjaukƒÅt spƒìli!",
                                                        "‚ö† –ó–∞—ò–µ–±–∞–æ —Å–∏ –∏–≥—Ä—É!")))
        else:
            await message.answer("‚ö† –í—ã –Ω–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª–∏—Å—å —Å–∏—Å—Ç–µ–º–µ!")
    
