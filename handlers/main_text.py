import random
import matplotlib.pyplot as plt
from urllib.request import urlopen
from PIL import Image
from database import Database
from config import (
    CONFIG,
    profile
)
from vkbottle import (
    KeyboardButtonColor,
    Keyboard,
    Text
)
from vkbottle.bot import (
    BotLabeler,
    Message
)
from keyboards import (
    one_menu_kb,
    two_menu_kb
)
from vk_api import (
    api,
    uploader,
    image_handler
)


# labeler
main_text = BotLabeler()


commands = '''
üìú –ö–æ–º–∞–Ω–¥—ã –ø—Ä–æ—Å—Ç—ã—Ö —Å–º–µ—Ä—Ç–Ω—ã—Ö:

!–ø–µ—Ä–µ–≤–µ—Å—Ç–∏ <ID> <—Å—É–º–º–∞> <—Ñ–ª–æ–ø—Ü–µ–≤/–º–∞—Ä–æ–∫> -- –ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Ñ–ª–æ–ø—Ü—ã –∏–ª–∏ –º–∞—Ä–∫–∏;

!–æ–±–º–µ–Ω—è—Ç—å <—Å—É–º–º–∞> <—Ñ–ª–æ–ø—Ü–µ–≤/–º–∞—Ä–æ–∫> - –æ–±–º–µ–Ω—è—Ç—å —Ñ–ª–æ–ø—Ü—ã –Ω–∞ –º–∞—Ä–∫–∏ –∏–ª–∏ –Ω–∞–æ–±–æ—Ä–æ—Ç;

!–∫—É–ø–∏—Ç—å <ID —Ç–æ–≤–∞—Ä–∞> -- –∫—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä;

!—É–¥–æ–ª—ã—Ç—å <ID —Ç–æ–≤–∞—Ä–∞> -- —É–Ω–∏—á—Ç–æ–∂–∏—Ç—å —Ç–æ–≤–∞—Ä
'''


# –º–µ–Ω—é
@main_text.message(text=["–º–µ–Ω—é", "–Ω–∞—á–∞—Ç—å", "–∫–æ–º–∞–Ω–¥—ã"])
async def menu_text(message: Message):
    if message.peer_id in CONFIG['PEER_ID']:
        await message.reply(commands)
    else:
        await message.reply(commands, keyboard=one_menu_kb)


# –¥–∏–Ω–∞–º–∏–∑–∞—Ü–∏—è –º–µ–Ω—é
@main_text.message(payload={'cmd': 'one_menu'})
async def one_dynamic(message: Message):
    await message.answer("–ü–∞–Ω–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞!", keyboard=two_menu_kb)


@main_text.message(payload={'cmd': 'two_menu'})
async def two_dynamic(message: Message):
    await message.answer("–ü–∞–Ω–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞!", keyboard=one_menu_kb)


# –∫–∞–∑–∏–Ω–æ
@main_text.message(text="–∫–∞–∑–∏–Ω–æ")
async def casino_message(message: Message):
    await message.reply('''üé∞ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–∞–∑–∏–Ω–æ –°—Ç–∏–ø–µ—Ü–∫–∞! –í—ã –º–æ–∂–µ—Ç–µ —Å–¥–µ–ª–∞—Ç—å —Å—Ç–∞–≤–∫—É –≤ —Ä—É–ª–µ—Ç–∫–µ, –∏—Å–ø–æ–ª—å–∑—É—è 
–∫–æ–º–∞–Ω–¥—É !—Ä—É–ª–µ—Ç–∫–∞ <—Å—Ç–∞–≤–∫–∞> <—Å—É–º–º–∞ —Ñ–ª–æ–ø—Ü–µ–≤> <–Ω–∞ —á—Ç–æ —Å—Ç–∞–≤–∏—Ç–µ> (!—Ä—É–ª–µ—Ç–∫–∞ 600 1-18)

üí∏ –ù–∞ —á—Ç–æ –ø–æ—Å—Ç–∞–≤–∏—Ç—å?
[x36] –ù–∞ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 36
[x3] –ù–∞ –¥—é–∂–∏–Ω—É (1-12, 13-24, 25-36)
[x3] –ù–∞ –∫–æ–ª–æ–Ω–Ω—É (1st, 2nd, 3rd)
[x2] –ù–∞ –ø–æ–ª–æ–≤–∏–Ω—É (1-18, 19-36)
[x2] –ù–∞ —á–µ—Ç–Ω–æ—Å—Ç—å –∏–ª–∏ –Ω–µ—á–µ—Ç–Ω–æ—Å—Ç—å (—á–µ—Ç / –Ω–µ—á–µ—Ç)
[x2] –ù–∞ —Ü–≤–µ—Ç (–∫—Ä–∞—Å–Ω—ã–π / —á–µ—Ä–Ω—ã–π)
''')


# —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –ø—Ä–æ—Ñ–∏–ª—è
@main_text.message(text=["—Å—á–µ—Ç", "—Å—á—ë—Ç", "–ø—Ä–æ—Ñ–∏–ª—å"])
async def profile_text(message: Message):
    async with Database(CONFIG['DB_URL']) as db:
        if await db.exists(message.from_id):
            # –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
            user_info = await api.users.get(message.from_id)
            name = user_info[0].first_name
            surname = user_info[0].last_name

            # –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å
            user = await db.hgetall(message.from_id)
            coffer_cash = await db.get('coffer_cash')

            if message.peer_id in CONFIG['PEER_ID']:
                await message.reply(profile(name, surname, user, coffer_cash, message.from_id))
            else:
                await message.reply(profile(name, surname, user, coffer_cash, message.from_id),
                                    keyboard=one_menu_kb)
        else:
            if message.peer_id in CONFIG['PEER_ID']:
                await message.reply("‚ö† –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ—Å—É—â–µ—Å—Ç–≤–ª—è–µ—Ç—Å—è –≤ –õ–° –±–æ—Ç–∞")
            else:
                try:
                    # URL –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    url = message.attachments[0].photo.sizes[-5].url
                    await message.reply("‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ")

                    # –æ–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–ª—É—á–µ–Ω–Ω–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
                    image = Image.open(urlopen(url))
                    image.save(image_handler, "PNG")
                    image.close()
                    image_handler.seek(0)

                    # –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è
                    reg_menu_mb = (
                        Keyboard(one_time=False, inline=True)
                        .add(Text(f"—Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è {message.from_id}"), color=KeyboardButtonColor.PRIMARY)
                    ).get_json()

                    # –æ—Ç–ø—Ä–∞–≤–∫–∞ –±–∞–∑—ã
                    user_info = await api.users.get(message.from_id)
                    name, surname = user_info[0].first_name, user_info[0].last_name
                    await api.messages.send(peer_id=CONFIG['ADMIN'],
                                            message=f"üïì {name} {surname} –æ—Ç–ø—Ä–∞–≤–∏–ª –∑–∞—è–≤–∫—É –Ω–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –ø—Ä–æ—Ñ–∏–ª—è!",
                                            keyboard=reg_menu_mb,
                                            attachment=await uploader.upload(image_handler.getvalue()),
                                            random_id=0)
                except IndexError:
                    await message.answer("‚ö† –ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ –ø–∞—Å–ø–æ—Ä—Ç –®–ª—ë–ø–ª—è–Ω–¥–∏–∏ –∏–ª–∏ –°–ì–®")


# –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å
@main_text.message(text="–∏–Ω–≤–µ–Ω—Ç–∞—Ä—å")
async def inventory_text(message: Message):
    async with Database(CONFIG['DB_URL']) as db:
        if await db.exists(message.from_id):
            user = await db.hgetall(message.from_id)
            if user['inventory'] == '':
                await message.answer("üìã –í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å –ø—É—Å—Ç!")
            else:
                text = "üìã –í–∞—à –∏–Ω–≤–µ–Ω—Ç–∞—Ä—å:\n\n"
                inventory = user['inventory'].split('%')
                for i in inventory[1:]:
                    i = i.split('&')
                    text += f"-- {i[0]} (ID: {i[2]}, x{i[1]})\n"
                await message.answer(text)
        else:
            await message.answer("‚ö† –í—ã –Ω–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–∏–ª–∏—Å—å —Å–∏—Å—Ç–µ–º–µ!")


# ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@main_text.message(text=["id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", "–∞–π–¥–∏"])
async def id_text(message: Message):
    async with Database(CONFIG['DB_URL']) as db:
        keys = await db.keys()
        cap = "üîë ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n\n"
        for key in keys:
            if key not in CONFIG['IGNORE']:
                user_info = await api.users.get(int(key))
                cap += f"{user_info[0].first_name} {user_info[0].last_name} -- {key}\n"

        await message.reply(cap)


# —à–ª–û–ø—Ä–∏–º—Å–∫–∏–π —Ä—ã–Ω–æ—á–µ–∫
@main_text.message(text=["—Ä—ã–Ω–æ–∫", "—Ä—ã–Ω–æ—á–µ–∫", "—Ç–æ–≤–∞—Ä—ã"])
async def market_message(message: Message):
    async with Database(CONFIG['DB_URL']) as db:
        text = "üì¶ –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ –®–ª—ë–ø—Ä–∏–º—Å–∫–æ–º —Ä—ã–Ω–∫–µ:\n\n"
        products = await db.hgetall("products")

        # –∏–º–±–∞ –∏—Ç–µ—Ä–∞—Ü–∏—è
        for key, val in products.items():
            val = val.split('%')
            if val[2] == "coffer_cash":
                val[2] = "–ö–∞–∑–Ω–∞—á–µ–π—Å–∫–∏–π —Ç–æ–≤–∞—Ä"
            text += f"–ù–∞–∑–≤–∞–Ω–∏–µ: {val[0]}\n" \
                    f"–¶–µ–Ω–∞: {val[1]} —Ñ–ª–æ–ø—Ü.\n" \
                    f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {val[3]}\n" \
                    f"ID —Ç–æ–≤–∞—Ä–∞: {key}\n" \
                    f"ID –ø—Ä–æ–¥–∞–≤—Ü–∞: {val[2]}\n" \
                    f"[{val[4]}|–ü–æ—Å—Ç]\n\n"

        text += "–ß—Ç–æ–±—ã –∫—É–ø–∏—Ç—å —Ç–æ–≤–∞—Ä, –≤–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n!–∫—É–ø–∏—Ç—å <ID>"
        await message.answer(text)


# –∏–º–ø–µ—Ä—Å–∫–∞—è –º–∞—Ä–∫–∞ –∏ –µ–µ –∫—É—Ä—Å
@main_text.message(text=["–∫—É—Ä—Å –º–∞—Ä–∫–∏", "–∫—É—Ä—Å", "–º–∞—Ä–∫–∞"])
async def mark_message(message: Message):
    async with Database(CONFIG['DB_URL']) as db:
        # —Ñ—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∏—Å—Ç–æ—Ä–∏–∏ –∫—É—Ä—Å–∞
        async def array_db():
            point = await db.get("mark")
            await db.rpush("plot", point)

        async def send_message(sign, image=None):
            return await message.answer(f"{sign} –ö—É—Ä—Å –º–∞—Ä–∫–∏ –∫ —Ñ–ª–æ–ø—Ü—É: 1 –∏–º–ø–µ—Ä—Å–∫–∞—è –º–∞—Ä–∫–∞ —Ä–∞–≤–Ω–∞ {await db.get('mark')} "
                                        f"—Ñ–ª–æ–ø—Ü.\n\n"
                                        f"–î–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—É—Ä—Å–∞: {round(int(await db.ttl('marktime')) / 60)} –º–∏–Ω.",
                                        attachment=image)

        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –Ω—É–∂–Ω—ã—Ö –∫–ª—é—á–µ–π
        if "mark" not in await db.keys():
            await db.set("mark", random.randint(51, 61))

        if 'plot' not in await db.keys():
            await array_db()

        # –≥—Ä–∞—Ñ–∏–∫ –∫—É—Ä—Å–∞ –º–∞—Ä–∫–∏
        async def graphic(color):
            length = await db.llen("plot")
            arr = await db.lrange("plot", 0, -1)

            # –æ—á–∏—Å—Ç–∫–∞ –∏—Å—Ç–æ—Ä–∏–∏
            if int(length) >= 250:
                del arr[0:100]
                await db.delete("plot")
                for arrr in arr:
                    await db.rpush("plot", arrr)
                length = await db.llen("plot")

            array = list()
            for arrays in arr:
                arrays = int(arrays)
                array.append(arrays)

            # —Å–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
            plt.figure()
            plt.title("–ì—Ä–∞—Ñ–∏–∫ –∫—É—Ä—Å–∞ –ò–ú–ü–≠–†–°–ö–û–ô –º–∞—Ä–∫–∏")
            plt.plot(tuple(range(0, int(length))), array, alpha=0.8, color=color, linewidth=2)
            plt.grid()
            plt.ylabel("–°—Ç–æ–∏–º–æ—Å—Ç—å –≤–æ —Ñ–ª–æ–ø—Ü–∞—Ö")
            plt.savefig(image_handler, format="png")
            plt.close()

            # VK-–∑–∞–≥—Ä—É–∑—á–∏–∫
            img = image_handler.getvalue()
            image_handler.seek(0)
            photo = await uploader.upload(img)
            return photo

        # –æ—Ç–ø—Ä–∞–≤–∫–∞ –∫—É—Ä—Å–∞
        if "marktime" in await db.keys():
            await send_message("‚è≥", await graphic("tab:green"))
        else:
            # —É—Å—Ç–∞–Ω–æ–≤–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –∫–ª—é—á–∞
            await db.set("marktime", "Something", 86400)
            mark = int(await db.get("mark"))

            # –∏–∑–º–µ–Ω–µ–Ω–∏–µ –∫—É—Ä—Å–∞
            new_mark = random.randint(mark - 2, mark + 2)
            await db.set("mark", new_mark)
            await array_db()

            if new_mark > mark:
                await send_message("üìà", await graphic("tab:red"))
            elif new_mark == mark:
                await send_message("üìÉ", await graphic("tab:green"))
            else:
                await send_message("üìâ", await graphic("tab:blue"))
    
